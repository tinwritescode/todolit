// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    projects        Project[]
    WeeklyOverview  WeeklyOverview[]
    EnglishTools    EnglishTools[]
    tokens          Token[]
    promptTemplates PromptTemplate[]
    prompts         Prompt[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id               Int             @id @default(autoincrement())
    title            String
    completed        Boolean         @default(false)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    dueDate          DateTime?
    completedAt      DateTime?
    project          Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId        Int?
    WeeklyOverview   WeeklyOverview? @relation(fields: [weeklyOverviewId], references: [id])
    weeklyOverviewId Int?

    @@index([title])
    @@index([projectId])
}

model Project {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    color       String   @default("bg-blue-500")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    todos       Todo[]
    user        User     @relation(fields: [userId], references: [id])
    userId      String

    @@index([userId])
}

model WeeklyOverview {
    id         Int      @id @default(autoincrement())
    week       Int
    year       Int
    weekStreak Int      @default(0)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    todos      Todo[]

    @@unique([week, year])
    @@index([userId])
}

enum EnglishToolsStatus {
    INITIAL
    PENDING
    COMPLETE
    ERROR
}

enum PromptStatus {
    INITIAL
    PENDING
    COMPLETE
    ERROR
}

model EnglishTools {
    id              Int                @id @default(autoincrement())
    sentence        String
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    author          User               @relation(fields: [authorId], references: [id])
    authorId        String
    isCorrect       Boolean            @default(false)
    incorrectReason String?
    b1Level         String[]
    b2Level         String[]
    c1Level         String[]           @default([])
    pinned          Boolean            @default(false)
    pinnedAt        DateTime?
    feedback        String?
    status          EnglishToolsStatus @default(INITIAL)

    @@index([authorId])
}

model Token {
    id               Int      @id @default(autoincrement())
    address          String   @unique
    name             String
    symbol           String
    chainId          Int
    network          String?
    deployTxHash     String
    initializeTxHash String?
    deployerAddress  String
    totalSupply      String?
    ownerPercent     Int?
    airdropPercent   Int?
    salePercent      Int?
    description      String?
    imageUrl         String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    deployedBy   User   @relation(fields: [deployedById], references: [id])
    deployedById String

    @@index([deployedById])
    @@index([chainId])
}

model PromptTemplate {
    id        Int      @id @default(autoincrement())
    name      String
    content   String
    variables Json?    @default("{}")
    isPublic  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    Prompt    Prompt[]

    @@index([userId])
}

model Prompt {
    id               Int             @id @default(autoincrement())
    name             String?
    content          String
    status           PromptStatus    @default(INITIAL)
    errorMessage     String?
    result           String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    user             User            @relation(fields: [userId], references: [id])
    userId           String
    promptTemplate   PromptTemplate? @relation(fields: [promptTemplateId], references: [id])
    promptTemplateId Int?
    subPrompts       SubPrompt[]

    @@index([userId])
    @@index([promptTemplateId])
}

model SubPrompt {
    id           Int          @id @default(autoincrement())
    name         String
    content      String
    status       PromptStatus @default(INITIAL)
    errorMessage String?
    result       String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    Prompt       Prompt?      @relation(fields: [promptId], references: [id])
    promptId     Int?

    @@index([promptId])
}
