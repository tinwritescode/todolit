// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    EnglishTools  EnglishTools[]
    backupFiles   BackupFile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EnglishToolsStatus {
    INITIAL
    PENDING
    COMPLETE
    ERROR
}

model EnglishTools {
    id              Int                @id @default(autoincrement())
    sentence        String
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    author          User               @relation(fields: [authorId], references: [id])
    authorId        String
    isCorrect       Boolean            @default(false)
    incorrectReason String?
    b1Level         String[]
    b2Level         String[]
    c1Level         String[]           @default([])
    pinned          Boolean            @default(false)
    pinnedAt        DateTime?
    feedback        String?
    status          EnglishToolsStatus @default(INITIAL)

    @@index([authorId])
}

model BackupFile {
    id          String  @id @default(cuid())
    name        String // User-friendly name for the backup
    description String?
    fileName    String // Original filename
    fileUrl     String // UploadThing file URL
    fileKey     String // UploadThing file key for deletion/management
    fileSize    Int // File size in bytes
    mimeType    String // File MIME type

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Backup metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive  Boolean  @default(true)

    // Optional: backup version or category
    version  String? // e.g., "v1.0", "backup-2024-01"
    category String? // e.g., "settings", "data", "full-backup"

    // Auto-sync specific fields
    syncMetadata Json? // Store sync-specific metadata
    deviceId     String? // Track which device created the backup
    syncVersion  Int     @default(1) // Incremental sync version
    isAutoSync   Boolean @default(false) // Distinguish auto-sync backups

    @@index([userId])
    @@index([createdAt])
    @@index([category])
    @@index([isAutoSync])
}
